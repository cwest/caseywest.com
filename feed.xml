<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Corner of Weeping</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://caseywest.com/feed.xml" />
<link rel="alternate" type="text/html" href="http://caseywest.com" />
<updated>2014-12-30T11:20:57-05:00</updated>
<id>http://caseywest.com/</id>
<author>
  <name>Casey West</name>
  <uri>http://caseywest.com/</uri>
  <email></email>
</author>


<entry>
  <title type="html"><![CDATA[Integrated Tests Are a Scam]]></title>
 <link rel="alternate" type="text/html" href="http://vimeo.com/80533536" />
  <id>http://caseywest.com/integrated-tests-are-a-scam</id>
  <published>2014-12-29T14:24:02-05:00</published>
  <updated>2014-12-29T14:24:02-05:00</updated>
  <author>
    <name>Casey West</name>
    <uri>http://caseywest.com</uri>
    <email></email>
  </author>
  <content type="html">&lt;p&gt;This is an excellent conference talk laying out the core problem with reliance on integrated tests&lt;sup id=&quot;fnref:integrated_tests&quot;&gt;&lt;a href=&quot;#fn:integrated_tests&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. I&#39;ve seen this problem at several companies. Here are the steps to reproduce:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Build a complicated system organically.&lt;/li&gt;
  &lt;li&gt;Observe quality degrade.&lt;/li&gt;
  &lt;li&gt;Declare testing a panacea.&lt;/li&gt;
  &lt;li&gt;Build a large, QA-lead integrated test suite at great cost.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now a huge, brittle test suite exists which provides no direct value to development, where it&#39;s needed most, and doesn&#39;t address the root problem: poor system design.&lt;/p&gt;

&lt;h2 id=&quot;integrated-test-hell&quot;&gt;Integrated test hell.&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.jbrains.ca/&quot;&gt;J.B. Rainsberger&lt;/a&gt; describes the problem well. If your project has a monolithic, external test suite which relies on the entire architecture to run you are in this special hell right now. The clearest representation I can think of is his explanation of how many tests you&#39;d have to write to get value out of an &lt;em&gt;integrated tests&lt;/em&gt; versus &lt;em&gt;isolated tests&lt;/em&gt;&lt;sup id=&quot;fnref:isolated_tests&quot;&gt;&lt;a href=&quot;#fn:isolated_tests&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;A software architecture with a few interconnected components (lets say, for example: a database, REST API, UI, Job Queue) requires tests for each function of each component. If we&#39;re relying on &lt;em&gt;integrated tests&lt;/em&gt; we have to write tests to exercise every function of every component, and every combination of connections between every function of every component. As you write that software you need to write &lt;script type=&quot;math/tex&quot;&gt; O(n!) &lt;/script&gt; integrated tests. You can&#39;t write that many tests. You don&#39;t have enough time to write enough tests to have confidence in that system. That&#39;s scary. &lt;strong&gt;That&#39;s impossible.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-cycle&quot;&gt;The cycle.&lt;/h2&gt;

&lt;p&gt;I love this because it&#39;s clear and true. We&#39;ve all seen this run-on sentence loop:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;100% of our integrated tests pass but there&#39;s a mistake&lt;sup id=&quot;fnref:mistake&quot;&gt;&lt;a href=&quot;#fn:mistake&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; in our software&lt;/strong&gt;; so we write more integrated tests to fill in the cracks which allows us to design more sloppily and gives us more opportunities for mistakes, and spending time on integrated tests means less time for isolated tests which increases the likelihood that &lt;strong&gt;100% of the tests pass but we still have mistakes.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-should-you-do-about-this&quot;&gt;What should you do about this?&lt;/h2&gt;

&lt;p&gt;There is a strong correlation between large numbers of integrated tests and design problems. Integrated tests don&#39;t offer any pressure to improve our designs. Isolated tests do. Stop pretending integrated tests are helping you. Write isolated tests. &lt;/p&gt;

&lt;p&gt;To quote J.B.:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;pullquote-right&quot; data-pullquote=&quot;the whole point of test driven development is not to do testing; it&amp;apos;s to learn about the quality of our design&quot;&gt; 
&lt;em&gt;The real benefit of isolated tests — testing one function at a time — is that those tests put tremendous pressure on our designs. Those tests are the ones that make it most clear where our design problems are. &lt;strong&gt;Remember that the whole point of test driven development is not to do testing; it&#39;s to learn about the quality of our design.&lt;/strong&gt; We use the theory that if our design has problems then the tests will be hard to write. The tests will be hard to understand. It&#39;ll be difficult to write these small, isolated tests to check one thing at a time.&lt;/em&gt;
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;If you have more &lt;em&gt;isolated tests&lt;/em&gt; than &lt;em&gt;integrated tests&lt;/em&gt; chances are you have a decent design with clear interfaces and contracts between collaborating systems. This path is cheaper, faster, less likely to allow mistakes, and provides high-bandwith feedback on the quality of your software design. As you write this software you need to write &lt;script type=&quot;math/tex&quot;&gt; O(n) &lt;/script&gt; isolated tests.&lt;/p&gt;

&lt;p&gt;You don&#39;t have to multiply the code paths in your system to get thorough coverage, you can just add them. You go from a combinatorial explosion of tests-to-code-paths to a linear increase in tests. &lt;strong&gt;That&#39;s possible.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There&#39;s a lot of gold in this talk. Watch it. Twice!&lt;/p&gt;

&lt;iframe width=&quot;500&quot; height=&quot;281&quot; src=&quot;http://player.vimeo.com/video/80533536 &quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:integrated_tests&quot;&gt;
      &lt;p&gt;Not to be confused with &lt;em&gt;integration tests&lt;/em&gt; (referred to in this talk as &lt;em&gt;collaboration tests&lt;/em&gt;). Integrated tests require a complete, integrated architecture to run. &lt;em&gt;Integration tests&lt;/em&gt; simply test the collaboration between independent components. &lt;a href=&quot;#fnref:integrated_tests&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:isolated_tests&quot;&gt;
      &lt;p&gt;&lt;em&gt;Isolated tests&lt;/em&gt; is a good name for tests operating on a specific function within a software architecture which exercise that function directly, in isolation, independent of any external collaborators in the architecture. &lt;a href=&quot;#fnref:isolated_tests&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:mistake&quot;&gt;
      &lt;p&gt;Sometimes we call these defects or bugs; I agree with the speaker that&#39;s too abstract. It&#39;s a human error (more likely a series of human errors). Everywhere else in the world we call those mistakes. &lt;a href=&quot;#fnref:mistake&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;

  &lt;p&gt;&lt;a href=&quot;http://caseywest.com/integrated-tests-are-a-scam/&quot;&gt;Integrated Tests Are a Scam&lt;/a&gt; was originally published by Casey West at &lt;a href=&quot;http://caseywest.com&quot;&gt;Corner of Weeping&lt;/a&gt; on December 29, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Your Software Is Made of People]]></title>
 <link rel="alternate" type="text/html" href="http://caseywest.com/your-software-is-made-of-people/" />
  <id>http://caseywest.com/your-software-is-made-of-people</id>
  <published>2014-12-24T10:00:22-05:00</published>
  <updated>2014-12-24T10:00:22-05:00</updated>
  <author>
    <name>Casey West</name>
    <uri>http://caseywest.com</uri>
    <email></email>
  </author>
  <content type="html">&lt;p&gt;I was talking with someone the other day about my time as (Interim) VP of Engineering at &lt;a href=&quot;http://socialtext.com&quot;&gt;Socialtext&lt;/a&gt;. Did I enjoy that? The question was framed like this: some people just like doing things and not dealing with the social aspects of management. But I wonder, are they really much different?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Originally published by me on &lt;a href=&quot;https://web.archive.org/web/20090416185738/http://caseywest.com/2009/03/25/your-software-is-made-of-people/&quot;&gt;March 25, 2009&lt;/a&gt; and reprinted here as-is.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Software development is creating, maintaining, and evolving a system. Use whatever action verb you like, you are working with a system. That system can be made better or worse by your actions. If you fix a bug the system is better. Remove a networking bottleneck? Better. Introduce a needless database query on every iteration of a loop? Worse.&lt;/p&gt;

&lt;p&gt;Software doesn’t work in isolation. The system is bigger than that. If you increase the memory requirements for your software the servers had better have enough memory to manage it. If you rewrite your code in Python a host of changes are required to make that change possible.&lt;/p&gt;

&lt;p&gt;How are teams much different? Leading a team requires the creation, maintenance, and evolution of a system. Again, you can make it better or worse. Help a peer solve a problem with a better tool then your system is better. Reduce needless process? Better. Introduce a needless process on every iteration of development? Worse.&lt;/p&gt;

&lt;p&gt;I think both people and technology are irrevocably intertwined. In fact, hacking on one and not the other will cause the performance of both to suffer. This is called &lt;a href=&quot;http://en.wikipedia.org/wiki/Sociotechnical_systems_theory&quot;&gt;Sociotechnical Systems Theory&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;joint-optimization&quot;&gt;Joint Optimization&lt;/h1&gt;

&lt;p&gt;A team survives - and eventually thrives - through the &lt;em&gt;joint optimization&lt;/em&gt; of their sociological and technological systems. Improving one alone often leads to recessive tendencies in the other. The nature of a team is the symbiotic relationship between its people and technology systems. Success can’t be realized by improving technology alone.&lt;/p&gt;

&lt;p&gt;This concept is often hard for everyone. Technologists find it easy to ignore social aspects of an organization. Non-technical specialists are reluctant to consider the artificial reality of technical objects like software. So it can be hard to consider both technical and social aspects of a system.&lt;/p&gt;

&lt;p&gt;The delivery of meaningful value to customers requires the actions of both people and technical objects. One can’t improve without the other. &lt;a href=&quot;http://scholar.lib.vt.edu/ejournals/SPT/v4_n3html/ROPOHL.html&quot;&gt;Technical achievement is equally as important as social advancement.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;people-are-part-of-technical-strategy&quot;&gt;People are (part of) Technical Strategy&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://alexandria.tue.nl/extra2/200211694.pdf&quot;&gt;Hacking on the social realities in your technology team has strategic value.&lt;/a&gt; A healthy team can do more than generate fantastic technological innovations because a healthy team can more accurately assess the environment they’re in. A viable business strategy can’t simply focus on organizational capabilities as most technologists are prone to do. The environment your team operates in isn’t the primary strategic factor as many non-technical specialists see it.&lt;/p&gt;

&lt;p&gt;The decision isn’t either/or among organizational capability and environmental reality. The winning strategy is both/and: react to environmental realities within the context of current and improved organizational capabilities.&lt;/p&gt;

&lt;h2 id=&quot;the-api-is-different&quot;&gt;The API is Different&lt;/h2&gt;

&lt;p&gt;The major difference between people and software on a technical team is the API. You’re still debugging, refactoring, creating, evolving, and removing what you don’t need. As a technical team leader you need to talk to both types of interfaces. The API is very different for debugging people vs. debugging software.&lt;/p&gt;

&lt;p&gt;If you want to build world class software you have to build a world class team.&lt;/p&gt;

&lt;p&gt;This is also why it’s hard for a star programmer to become a star manager. They never spent time learning the People API.&lt;/p&gt;

&lt;h2 id=&quot;footnote&quot;&gt;Footnote&lt;/h2&gt;

&lt;p&gt;Some of this thinking was done as research for a previous company. I was asked in appropriately vague terms how to fix our software delivery process. The pain was that it took months to get even the smallest changes to the customer. When I searched for the root of the problem it became clear there were two intertwined problems: one technical and the other social.&lt;/p&gt;

&lt;p&gt;Half the company was looking for a quick technical fix that would make it all better. The other half wanted to add process to over come the social issues. It was obvious to me we would have to fix both if we really wanted to solve the problem. Any solution that ignored the fact that we were a socio-technical organization was lacking.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://caseywest.com/your-software-is-made-of-people/&quot;&gt;Your Software Is Made of People&lt;/a&gt; was originally published by Casey West at &lt;a href=&quot;http://caseywest.com&quot;&gt;Corner of Weeping&lt;/a&gt; on December 24, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[hello, world]]></title>
 <link rel="alternate" type="text/html" href="http://caseywest.com/hello-world/" />
  <id>http://caseywest.com/hello-world</id>
  <published>2014-12-24T09:40:52-05:00</published>
  <updated>2014-12-24T09:40:52-05:00</updated>
  <author>
    <name>Casey West</name>
    <uri>http://caseywest.com</uri>
    <email></email>
  </author>
  <content type="html">&lt;p&gt;As most of us know by now it was Brian Kernighan who wrote the first known &lt;a href=&quot;https://en.wikipedia.org/wiki/%22Hello,_world!%22_program&quot;&gt;hello, world&lt;/a&gt; program:&lt;/p&gt;

&lt;div&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;&lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;
&lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;
&lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;main( ) {
        printf(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;hello, world&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Hello, world!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://caseywest.com/hello-world/&quot;&gt;hello, world&lt;/a&gt; was originally published by Casey West at &lt;a href=&quot;http://caseywest.com&quot;&gt;Corner of Weeping&lt;/a&gt; on December 24, 2014.&lt;/p&gt;</content>
</entry>

</feed>
